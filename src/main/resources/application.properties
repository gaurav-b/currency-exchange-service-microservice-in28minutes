server.port=8000
spring.application.name=currency-exchange-service

# Add a spring.config.import=configserver: property to your configuration.
# If configuration is not required add spring.config.import=optional:configserver: instead.
# To disable this check, set spring.cloud.config.enabled=false or 
# spring.cloud.config.import-check.enabled=false.
spring.config.import=optional:configserver:http://localhost:8888

spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true
spring.jpa.defer-datasource-initialization=true

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# configuring retry for resilience4j
# attempts configuration
#resilience4j.retry.instances.sample-api.maxRetryAttempts=5
# commenting above maxRetryAttempts and using new property maxAttempts
resilience4j.retry.instances.sample-api.maxAttempts=5
# attempts interval configuration
resilience4j.retry.instances.sample-api.waitDuration=1s
# exponential backoff, which increase the wait time a little longer (exponentially) 
# for each subsequential retry
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

# only if 90 percent of request fails then only circuit breaker switched to OPEN state
#resileence4j.circuitbreaker.instances.default.failureRateThreshold=90

# rate limiting configuration
# in below time period the number of requests we configured in the next
# property are allowed only
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
# these many number of requests only allowed in the time period configured above
resilience4j.ratelimiter.instances.default.limitForPeriod=2

# bulkhead configuration
# only at max 10 concurrent calls can be allowed
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10

# configure sampling - 1 denotes to trace every request
# for 10% value would be 0.1
# for 5% value would be 0.05
spring.sleuth.sampler.probability=1.0
# to configure the zipkin server url
spring.zipkin.baseUrl=http://192.168.99.100:9411/
